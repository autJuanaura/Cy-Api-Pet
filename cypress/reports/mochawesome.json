{
  "stats": {
    "suites": 0,
    "tests": 4,
    "passes": 4,
    "pending": 0,
    "failures": 0,
    "start": "2024-10-07T02:32:56.028Z",
    "end": "2024-10-07T02:32:56.944Z",
    "duration": 916,
    "testsRegistered": 4,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "372d4270-2507-4d19-87fa-23b5f8e48c56",
      "title": "",
      "fullFile": "cypress/e2e/auth-users-tests.cy.js",
      "file": "cypress/e2e/auth-users-tests.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "Create user successfully",
          "fullTitle": "Create user successfully",
          "timedOut": null,
          "duration": 461,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "cy.fixture('user.json').then(user => {\n  cy.request({\n    method: 'POST',\n    url: '/user',\n    body: user,\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }).then(response => {\n    expect(response.status).to.eq(200);\n    expect(response.body).to.have.property('code', 200);\n    expect(response.body).to.have.property('type', 'unknown');\n    userId = response.body.message; // Store the user ID\n    expect(userId).to.be.a('string'); // or expect(userId).to.be.a('number'); depending on the type of userId\n  });\n});",
          "err": {},
          "uuid": "983dafc5-7a1c-4817-9043-d176a1134ec7",
          "parentUUID": "372d4270-2507-4d19-87fa-23b5f8e48c56",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Login user successfully",
          "fullTitle": "Login user successfully",
          "timedOut": null,
          "duration": 115,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const password = Cypress.env('CY_PSSWD');\ncy.request({\n  method: 'GET',\n  url: `/user/login?username=${username}&password=${password}`\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property('code', 200);\n  expect(response.body).to.have.property('type', 'unknown');\n  expect(response.body.message).to.contain('logged in user session:');\n});",
          "err": {},
          "uuid": "a7fa30bf-3094-4337-9ff7-ed1628041938",
          "parentUUID": "372d4270-2507-4d19-87fa-23b5f8e48c56",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Update user successfully",
          "fullTitle": "Update user successfully",
          "timedOut": null,
          "duration": 104,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "cy.fixture('update-user.json').then(updatedUser => {\n  cy.request({\n    method: 'PUT',\n    url: `/user/${userId}`,\n    body: updatedUser,\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }).then(updateResponse => {\n    expect(updateResponse.status).to.eq(200);\n    expect(updateResponse.body).to.have.property('code', 200);\n    expect(updateResponse.body).to.have.property('type', 'unknown');\n    expect(updateResponse.body.message).to.be.a('string'); // or expect(updateResponse.body.message).to.be.a('number'); depending on the type of userId\n  });\n});",
          "err": {},
          "uuid": "9b5127d9-ca53-4241-8301-6ee17f2ffc6d",
          "parentUUID": "372d4270-2507-4d19-87fa-23b5f8e48c56",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Delete user successfully",
          "fullTitle": "Delete user successfully",
          "timedOut": null,
          "duration": 93,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "cy.request({\n  method: 'DELETE',\n  url: `/user/${userId}`,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  failOnStatusCode: false // add this option to catch the 404 error\n}).then(deleteResponse => {\n  if (deleteResponse.status === 404) {\n    console.error(`User   not found: ${userId}`);\n  } else {\n    expect(deleteResponse.status).to.eq(200);\n    expect(deleteResponse.body).to.have.property('code', 200);\n    expect(deleteResponse.body).to.have.property('type', 'unknown');\n    expect(deleteResponse.body.message).to.be.a('string'); // or expect(deleteResponse.body.message).to.be.a('number'); depending on the type of userId\n  }\n});",
          "err": {},
          "uuid": "e043fb12-4749-42aa-8262-3e89264c6fe5",
          "parentUUID": "372d4270-2507-4d19-87fa-23b5f8e48c56",
          "isHook": false,
          "skipped": false
        }
      ],
      "suites": [],
      "passes": [
        "983dafc5-7a1c-4817-9043-d176a1134ec7",
        "a7fa30bf-3094-4337-9ff7-ed1628041938",
        "9b5127d9-ca53-4241-8301-6ee17f2ffc6d",
        "e043fb12-4749-42aa-8262-3e89264c6fe5"
      ],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 773,
      "root": true,
      "rootEmpty": false,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports",
        "overwrite": true,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}